# Chunk 1: load-packages
library(statsr)
library(MASS)
library(dplyr)
library(ggplot2)
library(BAS)
# Chunk 2: load-data
data(wage)
# Chunk 3: wage-dist
summary(wage)
# Chunk 4
hist(wage$wage)
# Chunk 5
length(which(wage$wage>957))
length(which(wage$wage<957))
length(which(wage$wage<300))
# Chunk 6: two-vars-eda
ggplot(data=wage, aes(x = wage, y = educ)) +
geom_jitter() +
geom_smooth(method = "lm")
# Chunk 7
ggplot(data=wage, aes(x = wage, y = exper)) +
geom_jitter() +
geom_smooth(method = "lm")
# Chunk 8
ggplot(data=wage, aes(x = wage, y = iq)) +
geom_jitter() +
geom_smooth(method = "lm")
# Chunk 9
cor(wage$wage,wage$educ)
cor(wage$wage,wage$exper)
cor(wage$wage,wage$iq)
# Chunk 10: scatter-score-bty_avg
ggplot(data = wage, aes(x = iq, y = wage)) +
geom_point()
# Chunk 11: wage-iq-model
m_wage_iq = lm(wage ~ iq, data = wage)
m_wage_iq$coefficients
summary(m_wage_iq)$sigma
# Chunk 12
plot(wage$wage ~ m_wage_iq$residuals)
# Chunk 13
m_wage_educ = lm(wage ~ educ, data = wage)
m_wage_educ$coefficients
plot(wage$wage ~ m_wage_educ$residuals)
# Chunk 14: educ-resid
# type your code for the Exercise here, and Knit
# Chunk 15: lwage-iq-model
m_lwage_iq = lm(lwage ~ iq, data = wage)
m_lwage_iq = bas.lm(lwage ~ iq, data = wage[, c("lwage", "iq")]),
prior="BIC", bestmodel=c(1,1), n.models=1)
# use BIC as posterior distribution of coefficients uses OLS estimates
confint(coef(m_lwage_iq))
m_lwage_iq = bas.lm(lwage ~ iq, data = wage[, c("lwage", "iq")],
prior="BIC", bestmodel=c(1,1), n.models=1)
confint(coef(m_lwage_iq))
m_lwage_iq = bas.lm(lwage ~ iq, data = na.omit(wage[, c("lwage", "iq")]),
prior="BIC", bestmodel=c(1,1), n.models=1)
confint(coef(m_lwage_iq))
m_lwage_iq = lm(lwage ~ iq, data = na.omit(wage[, c("lwage", "iq")]),
+                     prior="BIC", bestmodel=c(1,1), n.models=1)
m_lwage_iq = lm(lwage ~ iq, data = na.omit(wage[, c("lwage", "iq")]))
confint(coef(m_lwage_iq))
coef(m_lwage_iq)
m_lwage_iq
m_lwage_full = lm(lwage ~ . - wage, data = wage)
m_lwage_full
summary(m_lwage_full)
BIC(m_lwage_full)
BIC(m_lwage_full)
m_lwage_nobrthord = lm(lwage ~ . -wage -brthord, data = na.omit(wage))
BIC(m_lwage_nobrthord)
BIC(lm(lwage ~ . - wage - feduc, data = wage))
BIC(lm(lwage ~ . - wage - meduc, data = wage))
BIC(lm(lwage ~ . - wage - sibs, data = wage))
BIC(lm(lwage ~ . - wage - brthord, data = wage))
# Chunk 1: load-packages
library(statsr)
library(MASS)
library(dplyr)
library(ggplot2)
library(BAS)
# Chunk 2: load-data
data(wage)
# Chunk 3: wage-dist
summary(wage)
# Chunk 4
hist(wage$wage)
# Chunk 5
length(which(wage$wage>957))
length(which(wage$wage<957))
length(which(wage$wage<300))
# Chunk 6: two-vars-eda
ggplot(data=wage, aes(x = wage, y = educ)) +
geom_jitter() +
geom_smooth(method = "lm")
# Chunk 7
ggplot(data=wage, aes(x = wage, y = exper)) +
geom_jitter() +
geom_smooth(method = "lm")
# Chunk 8
ggplot(data=wage, aes(x = wage, y = iq)) +
geom_jitter() +
geom_smooth(method = "lm")
# Chunk 9
cor(wage$wage,wage$educ)
cor(wage$wage,wage$exper)
cor(wage$wage,wage$iq)
# Chunk 10: scatter-score-bty_avg
ggplot(data = wage, aes(x = iq, y = wage)) +
geom_point()
# Chunk 11: wage-iq-model
m_wage_iq = lm(wage ~ iq, data = wage)
m_wage_iq$coefficients
summary(m_wage_iq)$sigma
# Chunk 12
plot(wage$wage ~ m_wage_iq$residuals)
# Chunk 13
m_wage_educ = lm(wage ~ educ, data = wage)
m_wage_educ$coefficients
plot(wage$wage ~ m_wage_educ$residuals)
# Chunk 14: educ-resid
# type your code for the Exercise here, and Knit
# Chunk 15: lwage-iq-model
m_lwage_iq = lm(lwage ~ iq, data = wage)
# Chunk 16: log-resid
plot(wage$wage ~ m_lwage_iq$residuals)
# Chunk 17
m_lwage_iq = bas.lm(lwage ~ iq, data = na.omit(wage[, c("lwage", "iq")]),
prior="BIC", bestmodel=c(1,1), n.models=1)
confint(coef(m_lwage_iq))
# Chunk 18: z-iq
# type your code for the Exercise here, and Knit
# Chunk 19: full-lwage-model
m_lwage_full = lm(lwage ~ . - wage, data = wage)
# Chunk 20
# type your code for Question 5 here, and Knit
# Chunk 21
BIC(m_lwage_full)
# Chunk 22
m_lwage_nobrthord = lm(lwage ~ . -wage -brthord, data = na.omit(wage))
BIC(m_lwage_nobrthord)
# Chunk 23
BIC(lm(lwage ~ . - wage - feduc, data = wage))
# Chunk 24: stepBIC
# type your code for the Exercise here, and Knit
# Chunk 25: bas-wage
wage_no_na = na.omit(wage)
bma_lwage = bas.lm(lwage ~ . -wage, data = wage_no_na,
prior = "BIC",
modelprior = uniform())
bma_lwage
summary(bma_lwage)
# Chunk 26: vis-BMA
par(mfrow = c(1,2))
coef_lwage = coefficients(bma_lwage)
plot(coef_lwage, subset = c(3,13), ask=FALSE)
# Chunk 27: conf-BMA
confint(coef_lwage)
bma_wage_red = bas.lm(lwage ~ . -wage, data = wage_red,
prior = "BIC",
modelprior = uniform())
wage_red = wage %>%
select(-sibs, -brthord, -meduc, -feduc)
bma_wage_red = bas.lm(lwage ~ . -wage, data = wage_red,
prior = "BIC",
modelprior = uniform())
summary(bma_wage_red)
summary(bma_wage_red$kww)
summary(wage_red)
coef_wage_red <- coefficients((bma_wage_red))
coef_wage_red <- coefficients(bma_wage_red)
confint(coef_wage_red)
question8 = bas.lm(lwage ~ . -wage, data = wage_red, data = na.omit(wage[, c("lwage", "iq")]),
prior = "ZS-null",
modelprior = beta.binomial(alpha=1.0, beta=1.0))
question8 = bas.lm(lwage ~ . -wage, data = na.omit(wage[, c("lwage", "iq")]),
prior = "ZS-null",
modelprior = beta.binomial(alpha=1.0, beta=1.0))
question8 = bas.lm(lwage ~ . -wage, data = na.omit(wage),
prior = "ZS-null",
modelprior = beta.binomial(alpha=1.0, beta=1.0))
confint(coef(question8))
summary(question8)
set.seed(314)
N = 100000
phi = rgamma(N,2,2)
sigma2 = 1/phi
mu = rnorm(N, 1, sqrt(sigma2/4))
y_5 = rnorm(N, mu, sqrt(sigma2))
y_5
confint(predict(y5))
# Chunk 1: load-packages
library(ggplot2)
library(dplyr)
library(statsr)
library(BAS)
library(MASS)
library(GGally)
# Chunk 2: load-data
load("movies.Rdata")
# Chunk 3
movies <- movies %>%
mutate(feature_film = ifelse(title_type == "Feature Film", "yes", "no"),
drama = ifelse(genre == "Drama", "yes", "no"),
mpaa_rating_R = ifelse(mpaa_rating == "R","yes","no"),
oscar_season = ifelse(thtr_rel_month == 11 | thtr_rel_month == 10 | thtr_rel_month == 12, "yes", "no"),
summer_season = ifelse(thtr_rel_month == 5 | thtr_rel_month == 6 | thtr_rel_month == 7 | thtr_rel_month == 8, "yes","no"))
# Chunk 4
movies2_features <- c("audience_score", "feature_film", "drama", "runtime", "mpaa_rating_R", "thtr_rel_year", "oscar_season", "summer_season", "imdb_rating", "imdb_num_votes", "critics_score", "best_pic_nom", "best_pic_win", "best_actor_win", "best_actress_win", "best_dir_win", "top200_box")
movies2 <- movies[movies2_features]
# Chunk 5
summary(movies2)
# Chunk 6
hist(movies2$audience_score)
# Chunk 7
suppressWarnings(suppressMessages(print(ggpairs(movies2, columns = 1:8))))
# Chunk 8
suppressWarnings(suppressMessages(print(ggpairs(movies2, columns = c(1,9:17)))))
# Chunk 9
cor(movies2$audience_score, movies2$critics_score)
# Chunk 10
ggplot(data=movies2, aes(x = audience_score, y = critics_score)) +
geom_jitter() +
geom_smooth(method = "lm")
# Chunk 11
cor(movies2$audience_score, movies2$imdb_rating)
# Chunk 12
ggplot(data=movies2, aes(x = audience_score, y = imdb_rating)) +
geom_jitter() +
geom_smooth(method = "lm")
# Chunk 13
as_full <- lm(audience_score ~ ., data= na.omit(movies2))
stepAIC.model <- stepAIC(as_full, direction = "backward", trace = TRUE)
# Chunk 14
AIC.lm <- lm(audience_score ~ runtime + mpaa_rating_R + thtr_rel_year + imdb_rating + critics_score + best_pic_nom + best_actor_win + best_actress_win, data=movies2)
# Chunk 15
AIC.lm$coefficients
# Chunk 16
summary(AIC.lm)$sigma
# Chunk 17
#plot(movies2$audience_score ~ AIC.lm$residuals)
# Chunk 18
hist(AIC.lm$residuals)
# Chunk 19
stepBIC.model <- stepAIC(as_full, direction = "backward", k=log(651), trace = TRUE)
# Chunk 20
BIC.lm <- lm(audience_score ~ runtime + imdb_rating + critics_score, data=movies2)
# Chunk 21
BIC.lm$coefficients
# Chunk 22
summary(BIC.lm)$sigma
plot(na.omit(movies2$audience_score) ~ BIC.lm$residuals)
# Chunk 1: load-packages
library(ggplot2)
library(dplyr)
library(statsr)
library(BAS)
library(MASS)
library(GGally)
# Chunk 2: load-data
load("movies.Rdata")
# Chunk 3
movies <- movies %>%
mutate(feature_film = ifelse(title_type == "Feature Film", "yes", "no"),
drama = ifelse(genre == "Drama", "yes", "no"),
mpaa_rating_R = ifelse(mpaa_rating == "R","yes","no"),
oscar_season = ifelse(thtr_rel_month == 11 | thtr_rel_month == 10 | thtr_rel_month == 12, "yes", "no"),
summer_season = ifelse(thtr_rel_month == 5 | thtr_rel_month == 6 | thtr_rel_month == 7 | thtr_rel_month == 8, "yes","no"))
# Chunk 4
movies2_features <- c("audience_score", "feature_film", "drama", "runtime", "mpaa_rating_R", "thtr_rel_year", "oscar_season", "summer_season", "imdb_rating", "imdb_num_votes", "critics_score", "best_pic_nom", "best_pic_win", "best_actor_win", "best_actress_win", "best_dir_win", "top200_box")
movies2 <- movies[movies2_features]
# Chunk 5
summary(movies2)
# Chunk 6
hist(movies2$audience_score)
# Chunk 7
suppressWarnings(suppressMessages(print(ggpairs(movies2, columns = 1:8))))
# Chunk 8
suppressWarnings(suppressMessages(print(ggpairs(movies2, columns = c(1,9:17)))))
# Chunk 9
cor(movies2$audience_score, movies2$critics_score)
# Chunk 10
ggplot(data=movies2, aes(x = audience_score, y = critics_score)) +
geom_jitter() +
geom_smooth(method = "lm")
# Chunk 11
cor(movies2$audience_score, movies2$imdb_rating)
# Chunk 12
ggplot(data=movies2, aes(x = audience_score, y = imdb_rating)) +
geom_jitter() +
geom_smooth(method = "lm")
# Chunk 13
as_full <- lm(audience_score ~ ., data= na.omit(movies2))
stepAIC.model <- stepAIC(as_full, direction = "backward", trace = TRUE)
# Chunk 14
AIC.lm <- lm(audience_score ~ runtime + mpaa_rating_R + thtr_rel_year + imdb_rating + critics_score + best_pic_nom + best_actor_win + best_actress_win, data=movies2)
# Chunk 15
AIC.lm$coefficients
# Chunk 16
summary(AIC.lm)$sigma
# Chunk 17
#plot(movies2$audience_score ~ AIC.lm$residuals)
# Chunk 18
hist(AIC.lm$residuals)
# Chunk 19
stepBIC.model <- stepAIC(as_full, direction = "backward", k=log(651), trace = TRUE)
# Chunk 1: load-packages
library(ggplot2)
library(dplyr)
library(statsr)
library(BAS)
library(MASS)
library(GGally)
# Chunk 2: load-data
load("movies.Rdata")
# Chunk 3
movies <- movies %>%
mutate(feature_film = ifelse(title_type == "Feature Film", "yes", "no"),
drama = ifelse(genre == "Drama", "yes", "no"),
mpaa_rating_R = ifelse(mpaa_rating == "R","yes","no"),
oscar_season = ifelse(thtr_rel_month == 11 | thtr_rel_month == 10 | thtr_rel_month == 12, "yes", "no"),
summer_season = ifelse(thtr_rel_month == 5 | thtr_rel_month == 6 | thtr_rel_month == 7 | thtr_rel_month == 8, "yes","no"))
# Chunk 1: load-packages
library(ggplot2)
library(dplyr)
library(statsr)
library(BAS)
library(MASS)
library(GGally)
# Chunk 2: load-data
load("movies.Rdata")
# Chunk 3
movies <- movies %>%
mutate(feature_film = ifelse(title_type == "Feature Film", "yes", "no"),
drama = ifelse(genre == "Drama", "yes", "no"),
mpaa_rating_R = ifelse(mpaa_rating == "R","yes","no"),
oscar_season = ifelse(thtr_rel_month == 11 | thtr_rel_month == 10 | thtr_rel_month == 12, "yes", "no"),
summer_season = ifelse(thtr_rel_month == 5 | thtr_rel_month == 6 | thtr_rel_month == 7 | thtr_rel_month == 8, "yes","no"))
# Chunk 4
movies2_features <- c("audience_score", "feature_film", "drama", "runtime", "mpaa_rating_R", "thtr_rel_year", "oscar_season", "summer_season", "imdb_rating", "imdb_num_votes", "critics_score", "best_pic_nom", "best_pic_win", "best_actor_win", "best_actress_win", "best_dir_win", "top200_box")
movies2 <- movies[movies2_features]
# Chunk 5
summary(movies2)
# Chunk 6
hist(movies2$audience_score)
# Chunk 7
suppressWarnings(suppressMessages(print(ggpairs(movies2, columns = 1:8))))
# Chunk 8
suppressWarnings(suppressMessages(print(ggpairs(movies2, columns = c(1,9:17)))))
# Chunk 9
cor(movies2$audience_score, movies2$critics_score)
# Chunk 10
ggplot(data=movies2, aes(x = audience_score, y = critics_score)) +
geom_jitter() +
geom_smooth(method = "lm")
# Chunk 11
cor(movies2$audience_score, movies2$imdb_rating)
# Chunk 12
ggplot(data=movies2, aes(x = audience_score, y = imdb_rating)) +
geom_jitter() +
geom_smooth(method = "lm")
# Chunk 1: load-packages
library(ggplot2)
library(dplyr)
library(statsr)
library(BAS)
library(MASS)
library(GGally)
# Chunk 2: load-data
load("movies.Rdata")
# Chunk 3
movies <- movies %>%
mutate(feature_film = ifelse(title_type == "Feature Film", "yes", "no"),
drama = ifelse(genre == "Drama", "yes", "no"),
mpaa_rating_R = ifelse(mpaa_rating == "R","yes","no"),
oscar_season = ifelse(thtr_rel_month == 11 | thtr_rel_month == 10 | thtr_rel_month == 12, "yes", "no"),
summer_season = ifelse(thtr_rel_month == 5 | thtr_rel_month == 6 | thtr_rel_month == 7 | thtr_rel_month == 8, "yes","no"))
# Chunk 4
movies2_features <- c("audience_score", "feature_film", "drama", "runtime", "mpaa_rating_R", "thtr_rel_year", "oscar_season", "summer_season", "imdb_rating", "imdb_num_votes", "critics_score", "best_pic_nom", "best_pic_win", "best_actor_win", "best_actress_win", "best_dir_win", "top200_box")
movies2 <- movies[movies2_features]
# Chunk 5
summary(movies2)
# Chunk 6
hist(movies2$audience_score)
# Chunk 7
suppressWarnings(suppressMessages(print(ggpairs(movies2, columns = 1:8))))
# Chunk 8
suppressWarnings(suppressMessages(print(ggpairs(movies2, columns = c(1,9:17)))))
# Chunk 9
cor(movies2$audience_score, movies2$critics_score)
# Chunk 10
ggplot(data=movies2, aes(x = audience_score, y = critics_score)) +
geom_jitter() +
geom_smooth(method = "lm")
# Chunk 11
cor(movies2$audience_score, movies2$imdb_rating)
# Chunk 12
ggplot(data=movies2, aes(x = audience_score, y = imdb_rating)) +
geom_jitter() +
geom_smooth(method = "lm")
# Chunk 1: load-packages
library(ggplot2)
library(dplyr)
library(statsr)
library(BAS)
library(MASS)
library(GGally)
# Chunk 1: load-packages
library(ggplot2)
library(dplyr)
library(statsr)
library(BAS)
library(MASS)
library(GGally)
# Chunk 2: load-data
load("movies.Rdata")
# Chunk 1: load-packages
library(ggplot2)
library(dplyr)
library(statsr)
library(BAS)
library(MASS)
library(GGally)
# Chunk 2: load-data
load("movies.Rdata")
# Chunk 3
movies <- movies %>%
mutate(feature_film = ifelse(title_type == "Feature Film", "yes", "no"),
drama = ifelse(genre == "Drama", "yes", "no"),
mpaa_rating_R = ifelse(mpaa_rating == "R","yes","no"),
oscar_season = ifelse(thtr_rel_month == 11 | thtr_rel_month == 10 | thtr_rel_month == 12, "yes", "no"),
summer_season = ifelse(thtr_rel_month == 5 | thtr_rel_month == 6 | thtr_rel_month == 7 | thtr_rel_month == 8, "yes","no"))
# Chunk 4
movies2_features <- c("audience_score", "feature_film", "drama", "runtime", "mpaa_rating_R", "thtr_rel_year", "oscar_season", "summer_season", "imdb_rating", "imdb_num_votes", "critics_score", "best_pic_nom", "best_pic_win", "best_actor_win", "best_actress_win", "best_dir_win", "top200_box")
movies2 <- movies[movies2_features]
# Chunk 5
summary(movies2)
# Chunk 6
suppressWarnings(suppressMessages(print(ggpairs(movies2, columns = 1:8))))
# Chunk 7
suppressWarnings(suppressMessages(print(ggpairs(movies2, columns = c(1,9:17)))))
# Chunk 8
cor(movies2$audience_score, movies2$critics_score)
# Chunk 9
ggplot(data=movies2, aes(x = audience_score, y = critics_score)) +
geom_jitter() +
geom_smooth(method = "lm")
# Chunk 10
cor(movies2$audience_score, movies2$imdb_rating)
# Chunk 11
ggplot(data=movies2, aes(x = audience_score, y = imdb_rating)) +
geom_jitter() +
geom_smooth(method = "lm")
# Chunk 12
as_full <- lm(audience_score ~ ., data= na.omit(movies2))
stepAIC.model <- stepAIC(as_full, direction = "backward", trace = TRUE)
# Chunk 13
AIC.lm <- lm(audience_score ~ runtime + mpaa_rating_R + thtr_rel_year + imdb_rating + critics_score + best_pic_nom + best_actor_win + best_actress_win, data=movies2)
# Chunk 14
AIC.lm$coefficients
# Chunk 15
summary(AIC.lm)$sigma
# Chunk 16
#plot(movies2$audience_score ~ AIC.lm$residuals)
# Chunk 17
hist(AIC.lm$residuals)
# Chunk 18
stepBIC.model <- stepAIC(as_full, direction = "backward", k=log(651), trace = TRUE)
# Chunk 19
BIC.lm <- lm(audience_score ~ runtime + imdb_rating + critics_score, data=movies2)
# Chunk 20
BIC.lm$coefficients
# Chunk 21
summary(BIC.lm)$sigma
